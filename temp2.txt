#include <windows.h>

HWND clientW;
HWND listW;


// Message Handler Main
LRESULT CALLBACK WndProc(HWND mainW, UINT msg, WPARAM wParam, LPARAM lParam)
{
    switch(msg)
    {
        case WM_CREATE:
            
        break;

        case WM_PAINT:
        {

            PAINTSTRUCT ps;

            HDC hdc = BeginPaint(mainW, &ps);
            HDC hdc2 = BeginPaint(clientW, &ps);
            HDC hdc3 = BeginPaint(listW, &ps);
     

            // Fill the entire window with black
            HBRUSH hBrush = CreateSolidBrush(RGB(0, 0, 0));
            HBRUSH hBrush2 = CreateSolidBrush(RGB(61, 54, 54));
            HBRUSH hBrush3 = CreateSolidBrush(RGB(91, 104,104));
   

            RECT rcClient;

            GetClientRect(mainW, &rcClient);
            GetClientRect(clientW, &rcClient);
            GetClientRect(listW, &rcClient);


            FillRect(hdc, &rcClient, hBrush);
            FillRect(hdc2, &rcClient, hBrush2);
            FillRect(hdc3, &rcClient, hBrush3);


            EndPaint(mainW, &ps);
            EndPaint(clientW, &ps);
            EndPaint(listW, &ps);

            DeleteObject(hBrush);
            DeleteObject(hBrush2);
            DeleteObject(hBrush3);

            return 0;
        }

        case WM_CLOSE:
            DestroyWindow(mainW);
            DestroyWindow(clientW);
        break;

        case WM_DESTROY:
            PostQuitMessage(0);
        break;

        default:

            HBRUSH hbrBackground = GetSysColorBrush(COLOR_WINDOW);
            SetClassLongPtr(mainW, GCLP_HBRBACKGROUND, (LONG_PTR)hbrBackground);
            return DefWindowProc(mainW, msg, wParam, lParam);
    }
    return 0;
}



int WINAPI WinMain(HINSTANCE hInstance, 
                   HINSTANCE hPrevInstance,
                   LPSTR lpCmdLine, 
                   int nCmdShow)
{
    WNDCLASSEX wcMain;
    HWND mainW;
    MSG Msg;

    //Register Main window --->
    wcMain.cbSize        = sizeof(WNDCLASSEX);
    wcMain.style         = CS_VREDRAW | CS_HREDRAW;
    wcMain.lpfnWndProc   = WndProc;
    wcMain.cbClsExtra    = 0;
    wcMain.cbWndExtra    = 0;
    wcMain.hInstance     = hInstance;
    wcMain.hIcon         = LoadIcon(NULL, IDI_APPLICATION);
    wcMain.hCursor       = LoadCursor(NULL, IDC_ARROW);
    wcMain.hbrBackground = (HBRUSH)(COLOR_WINDOW+3);
    wcMain.lpszMenuName  = NULL;
    wcMain.lpszClassName = "mainWindow";
    wcMain.hIconSm       = LoadIcon(NULL, IDI_APPLICATION);

      if(!RegisterClassEx(&wcMain))
    {
        MessageBox(NULL, "Main Window Registration Failed!", "Error!", MB_ICONEXCLAMATION | MB_OK);
        return 0;
    }

    //Create Main Window --->
    mainW = CreateWindowEx(
        WS_EX_CONTROLPARENT,
        "mainWindow",
        "GATE KEEPER",
        WS_SYSMENU | WS_MINIMIZEBOX,
        GetSystemMetrics(SM_CXSCREEN)/2-400,
        GetSystemMetrics(SM_CYSCREEN)/2-300,
        800,
        600,
        NULL, NULL, hInstance, NULL);

    if(mainW == NULL)
    {
        MessageBox(NULL, "Main Window Creation Failed!", "Error!",
            MB_ICONEXCLAMATION | MB_OK);
        return 0;
    }

    //Create Client Window --->
    clientW = CreateWindowEx(
        WS_EX_WINDOWEDGE,
        "mainWindow",
        "",
        WS_CHILD | WS_VISIBLE,
        0, 0, 800, 600,
        mainW, NULL, hInstance, NULL); 

    if(clientW == NULL)
    {
        MessageBox(NULL, "Client Window Creation Failed!", "Error!",
            MB_ICONEXCLAMATION | MB_OK);
        return 0;
    } 

    listW = CreateWindowEx(
        WS_EX_WINDOWEDGE,
        "mainWindow",
        "",
        WS_CHILD | WS_VISIBLE,
        100, 100, 300, 300,
        clientW, NULL, hInstance, NULL); 

    if(listW == NULL)
    {
        MessageBox(NULL, "Client Window Creation Failed!", "Error!",
            MB_ICONEXCLAMATION | MB_OK);
        return 0;
    } 


    ShowWindow(mainW, nCmdShow);
    UpdateWindow(mainW);
    

    // Message loop
    while(GetMessage(&Msg, NULL, 0, 0) > 0)
    {
        TranslateMessage(&Msg);
        DispatchMessage(&Msg);
    }
    return Msg.wParam;
}